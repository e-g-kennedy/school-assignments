# ELE8960 SCADA Independent Lab Assignment
# By: Ethan Kennedy
# April 8, 2021

import time
import threading
import sys
import queue
from tkinter import *  
import tkinter.messagebox
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
import logging

logging.basicConfig()
log = logging.getLogger()
log.setLevel(logging.INFO)

# Thread to continuously monitor Modbus input registers
class modbusThread(threading.Thread):

    def __init__(self, name, threadStartStopEvent):
        threading.Thread.__init__(self)
        self.name = name

    def ReadInputRegister(self, regNumber):
        regValue = client.read_input_registers(regNumber, 1, unit=5)
        regintValue = regValue.registers
        return regintValue

    def run(self):
        while(True):
            # Continiously monitor all the voltage and temperature registers
            transformer1Voltage["text"] = self.ReadInputRegister(0)
            transformer1Temp["text"] = self.ReadInputRegister(1)
            transformer2Voltage["text"] = self.ReadInputRegister(2)
            transformer2Temp["text"] = self.ReadInputRegister(3)
            transformer3Voltage["text"] = self.ReadInputRegister(4)
            transformer3Temp["text"] = self.ReadInputRegister(5)
            transformer4Voltage["text"] = self.ReadInputRegister(6)
            transformer4Temp["text"] = self.ReadInputRegister(7)

            # This if-else structure monitors the values in the registers.
            # If the values go out of range, the label will become red to indicate there's a problem            
            if int(transformer1Voltage["text"]) > 45000 or int(transformer1Voltage["text"]) < 44000:
                transformer1Voltage.configure(bg = 'red')
            else:
                transformer1Voltage.configure(bg = 'black')

            if int(transformer1Temp["text"]) > 180:
                transformer1Temp.configure(bg = 'red')
            else:
                transformer1Temp.configure(bg = 'black')

            if int(transformer2Voltage["text"]) > 45000 or int(transformer2Voltage["text"]) < 44000:
                transformer2Voltage.configure(bg = 'red')
            else:
                transformer2Voltage.configure(bg = 'black')

            if int(transformer2Temp["text"]) > 180:
                transformer2Temp.configure(bg = 'red')
            else:
                transformer2Temp.configure(bg = 'black')

            if int(transformer3Voltage["text"]) > 45000 or int(transformer3Voltage["text"]) < 44000:
                transformer3Voltage.configure(bg = 'red')
            else:
                transformer3Voltage.configure(bg = 'black')

            if int(transformer3Temp["text"]) > 180:
                transformer3Temp.configure(bg = 'red')
            else:
                transformer3Temp.configure(bg = 'black')

            if int(transformer4Voltage["text"]) > 45000 or int(transformer4Voltage["text"]) < 44000:
                transformer4Voltage.configure(bg = 'red')
            else:
                transformer4Voltage.configure(bg = 'black')

            if int(transformer4Temp["text"]) > 180:
                transformer4Temp.configure(bg = 'red')
            else:
                transformer4Temp.configure(bg = 'black')

            time.sleep(1.5)
            

def toggleButton(coil):
    coil_stats = coilstatus[coil]
    
    if coil_stats[0] == True:    
# Wrap the MODBUS IO in a try/except to catch potential comms or PLC failure
        try:
            client.write_coil(coil_stats[1], False, unit=1)
# Pop-up window when connection is lost to PLC
        except:
            tkinter.tkinter.messagebox.showerror("PLC_COMMS_FAILURE", "CHECK THE PLC!")        
            return

        coil_stats[0] = False
        coil_stats[2].configure(background ='#F0F0F0')
        coil_stats[2].configure(activebackground ='#F0F0F0')        

    else:
        try:
            client.write_coil(coil_stats[1], True, unit=1)

        except:
            tkinter.tkinter.messagebox.showerror("PLC_COMMS_FAILURE", "CHECK THE PLC!")        
            return

        coil_stats[0] = True
        coil_stats[2].configure(background ='#00FF00')
        coil_stats[2].configure(activebackground ='#00FF00')


client = ModbusClient('127.0.0.1', port = 502)

client.connect()   

# Create the tkinter window
root = Tk()
root.resizable(width=False, height=False)
root.geometry('{}x{}'.format(1500, 1100))
root.configure(background='grey')

# Create Switchyard 1 Controls title at top of window
switchyard_label = Label(root, text="Switchyard 1",
                         width=25, height=2, fg='white',
                         bg='grey', font=('Arial', 18),
                         relief=GROOVE).place(relx = 0.5, rely = 0.03, anchor = 'center')

# Create canvas
schematic = Canvas(root, width = 1500, height = 1000, bg = 'grey')
schematic.place(relx = 0.5, rely = 1, anchor = 's')

# Labels for primary and secondary voltage buses
schematic.create_text(50, 50, text = '44 KV', fill = 'white', font = ('Arial', 14))
schematic.create_text(50, 925, text = '8.32 KV', fill = 'white', font = ('Arial', 14))

# Feeder bus for primary side of transformers
schematic.create_line(50, 25, 1450, 25, width = 2, fill = 'blue')


#-------------------------------------------------- TRANSFORMER 1 --------------------------------------------------------#



# Transformer 1 label
schematic.create_text(200, 525, text = 'T1', fill = 'white', font = ('Arial', 14))

# Transformer 1 Modbus coil control for feeder switch
transformer_1_coil = Button(root, width=7, height=3, text='Switch 1', font=('Arial', 13, "bold")
                           ,command=lambda: toggleButton('transformer_1_switch'))

transformer_1_coil.place(x=110, y=295)

# Transformer 1 voltage indicator
schematic.create_text(100, 525, text = 'Voltage', fill = 'white', font = ('Arial', 14))
transformer1Voltage = Label(schematic, text = "0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer1Voltage.place(x = 100, y = 560, anchor = 'center')

# Transformer 1 temperature indicator
schematic.create_text(100, 595, text = 'Temperature', fill = 'white', font = ('Arial', 14))
transformer1Temp = Label(schematic, text="0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer1Temp.place(x = 100, y = 625, anchor = 'center')

# Transformer 1 line
schematic.create_line(250, 25, 250, 200, width = 2, fill = 'blue')
schematic.create_line(250, 257, 250, 400, width = 2, fill = 'blue')
schematic.create_line(250, 446, 250, 550, width = 2, fill = 'blue')
schematic.create_line(250, 625, 250, 725, width = 2, fill = 'blue')
schematic.create_line(250, 790, 250, 1000, width = 2, fill = 'blue') 

# Switch 1
schematic.create_oval(242, 200, 257, 215, fill = 'blue')
schematic.create_line(245, 206, 220, 255, width = 3, fill = 'blue')
schematic.create_oval(242, 250, 257, 265, fill = 'blue')

# Circuit breaker 1
schematic.create_oval(242, 725, 257, 740, fill = 'blue')
schematic.create_arc(285, 785, 255, 727, style = 'arc', extent = -180, width = 3, outline = 'blue', start = 90)
schematic.create_oval(242, 775, 257, 790, fill = 'blue')
                      
# Transformer 1 fuse
schematic.create_rectangle(242, 400, 258, 445, fill = 'blue')

# Draw transformer 1
schematic.create_arc(250, 575, 205, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(205, 575, 160, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(250, 575, 295, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(340, 575, 295, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')

schematic.create_arc(250, 650, 205, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(205, 650, 160, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(250, 650, 295, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(340, 650, 295, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')


#-------------------------------------------------- TRANSFORMER 2 --------------------------------------------------------#


# Transformer 2 label
schematic.create_text(550, 525, text = 'T2', fill = 'white', font = ('Arial', 14))

# Transformer 2 Modbus coil control for feeder switch
transformer_2_coil = Button(root, width=7, height=3, text='Switch 2', font=('Arial', 13, "bold")
                           ,command=lambda: toggleButton('transformer_2_switch'))

transformer_2_coil.place(x=460, y=295)

# Transformer 2 voltage indicator
schematic.create_text(450, 525, text = 'Voltage', fill = 'white', font = ('Arial', 14))
transformer2Voltage = Label(schematic, text = "0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer2Voltage.place(x = 450, y = 560, anchor = 'center')

# Transformer 2 temperature indicator
schematic.create_text(450, 595, text = 'Temperature', fill = 'white', font = ('Arial', 14))
transformer2Temp = Label(schematic, text="0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer2Temp.place(x = 450, y = 625, anchor = 'center')

# Transformer 2 line
schematic.create_line(600, 25, 600, 200, width = 2, fill = 'blue')
schematic.create_line(600, 257, 600, 400, width = 2, fill = 'blue')
schematic.create_line(600, 446, 600, 550, width = 2, fill = 'blue')
schematic.create_line(600, 625, 600, 725, width = 2, fill = 'blue')
schematic.create_line(600, 790, 600, 1000, width = 2, fill = 'blue') 

# Switch 2
schematic.create_oval(592, 200, 607, 215, fill = 'blue')
schematic.create_line(595, 206, 570, 255, width = 3, fill = 'blue')
schematic.create_oval(592, 250, 607, 265, fill = 'blue')

# Circuit breaker 2
schematic.create_oval(592, 725, 607, 740, fill = 'blue')
schematic.create_arc(635, 785, 605, 727, style = 'arc', extent = -180, width = 3, outline = 'blue', start = 90)
schematic.create_oval(592, 775, 607, 790, fill = 'blue')
                      
# Transformer 2 fuse
schematic.create_rectangle(592, 400, 608, 445, fill = 'blue')

# Draw transformer 2
schematic.create_arc(600, 575, 555, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(555, 575, 510, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(600, 575, 645, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(690, 575, 645, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')

schematic.create_arc(600, 650, 555, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(555, 650, 510, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(600, 650, 645, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(690, 650, 645, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')


#-------------------------------------------------- TRANSFORMER 3 --------------------------------------------------------#


# Transformer 3 label
schematic.create_text(900, 525, text = 'T3', fill = 'white', font = ('Arial', 14))

# Transformer 3 Modbus coil control for feeder switch
transformer_3_coil = Button(root, width=7, height=3, text='Switch 3', font=('Arial', 13, "bold")
                           ,command=lambda: toggleButton('transformer_3_switch'))

transformer_3_coil.place(x=810, y=295)

# Transformer 3 voltage indicator
schematic.create_text(800, 525, text = 'Voltage', fill = 'white', font = ('Arial', 14))
transformer3Voltage = Label(schematic, text = "0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer3Voltage.place(x = 800, y = 560, anchor = 'center')

# Transformer 3 temperature indicator
schematic.create_text(800, 595, text = 'Temperature', fill = 'white', font = ('Arial', 14))
transformer3Temp = Label(schematic, text="0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer3Temp.place(x = 800, y = 625, anchor = 'center')

# Transformer 3 line
schematic.create_line(950, 25, 950, 200, width = 2, fill = 'blue')
schematic.create_line(950, 257, 950, 400, width = 2, fill = 'blue')
schematic.create_line(950, 446, 950, 550, width = 2, fill = 'blue')
schematic.create_line(950, 625, 950, 725, width = 2, fill = 'blue')
schematic.create_line(950, 790, 950, 1000, width = 2, fill = 'blue') 

# Switch 3
schematic.create_oval(942, 200, 957, 215, fill = 'blue')
schematic.create_line(945, 206, 920, 255, width = 3, fill = 'blue')
schematic.create_oval(942, 250, 957, 265, fill = 'blue')

# Circuit breaker 3
schematic.create_oval(942, 725, 957, 740, fill = 'blue')
schematic.create_arc(985, 785, 955, 727, style = 'arc', extent = -180, width = 3, outline = 'blue', start = 90)
schematic.create_oval(942, 775, 957, 790, fill = 'blue')
                      
# Transformer 3 fuse
schematic.create_rectangle(942, 400, 958, 445, fill = 'blue')

# Draw transformer 3
schematic.create_arc(950, 575, 905, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(905, 575, 860, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(950, 575, 995, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(1040, 575, 995, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')

schematic.create_arc(950, 650, 905, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(905, 650, 860, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(950, 650, 995, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(1040, 650, 995, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')


#-------------------------------------------------- TRANSFORMER 4 --------------------------------------------------------#


# Transformer 4 label
schematic.create_text(1250, 525, text = 'T4', fill = 'white', font = ('Arial', 14))

# Transformer 1 Modbus coil control for feeder switch
transformer_4_coil = Button(root, width=7, height=3, text='Switch 4', font=('Arial', 13, "bold")
                           ,command=lambda: toggleButton('transformer_4_switch'))

transformer_4_coil.place(x=1175, y=295)

# Transformer 4 voltage indicator
schematic.create_text(1150, 525, text = 'Voltage', fill = 'white', font = ('Arial', 14))
transformer4Voltage = Label(schematic, text = "0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer4Voltage.place(x = 1150, y = 560, anchor = 'center')

# Transformer 4 temperature indicator
schematic.create_text(1150, 595, text = 'Temperature', fill = 'white', font = ('Arial', 14))
transformer4Temp = Label(schematic, text="0", height=1, width=5, bg='black', fg='white', font=('Arial', 18), relief=GROOVE)
transformer4Temp.place(x = 1150, y = 625, anchor = 'center')

# Transformer 4 line
schematic.create_line(1300, 25, 1300, 200, width = 2, fill = 'blue')
schematic.create_line(1300, 257, 1300, 400, width = 2, fill = 'blue')
schematic.create_line(1300, 446, 1300, 550, width = 2, fill = 'blue')
schematic.create_line(1300, 625, 1300, 725, width = 2, fill = 'blue')
schematic.create_line(1300, 790, 1300, 1000, width = 2, fill = 'blue') 

# Switch 4
schematic.create_oval(1292, 200, 1307, 215, fill = 'blue')
schematic.create_line(1295, 206, 1270, 255, width = 3, fill = 'blue')
schematic.create_oval(1292, 250, 1307, 265, fill = 'blue')

# Circuit breaker 4
schematic.create_oval(1292, 725, 1307, 740, fill = 'blue')
schematic.create_arc(1335, 785, 1305, 727, style = 'arc', extent = -180, width = 3, outline = 'blue', start = 90)
schematic.create_oval(1292, 775, 1307, 790, fill = 'blue')
                      
# Transformer 4 fuse
schematic.create_rectangle(1292, 400, 1308, 445, fill = 'blue')

# Draw transformer 4
schematic.create_arc(1300, 575, 1255, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(1255, 575, 1210, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(1300, 575, 1345, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')
schematic.create_arc(1390, 575, 1345, 525, start = 0, style = 'arc', extent = -180, width = 2, outline = 'blue')

schematic.create_arc(1300, 650, 1255, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(1255, 650, 1210, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(1300, 650, 1345, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')
schematic.create_arc(1390, 650, 1345, 600, start = 0, style = 'arc', extent = 180, width = 2, outline = 'blue')


threadStartStopEvent = threading.Event()
thread1 = modbusThread("Updating", threadStartStopEvent)
thread1.start()

RegNumber = 0

# Dictionary for button status and info
coilstatus = {'transformer_1_switch':[False,0,transformer_1_coil],
              'transformer_2_switch':[False,1,transformer_2_coil],
              'transformer_3_switch':[False,2,transformer_3_coil],
              'transformer_4_switch':[False,3,transformer_4_coil],
             }

root.mainloop()

client.close()
