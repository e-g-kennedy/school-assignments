/*
Name: Ethan Kennedy (040947426)
Date: December 4, 2019 
Assignment: DAT8921 (011) Final Lab Assignment
Details: This program will simulate a T-Test of temperatures taken over a 365 day period. It will intake the average of a standard population and compare it to new temperature sample values that come from the LDR which are stored into an array.
          The highest and lowest sample values will be found along with the day they were collected on. The highest and lowest samples will be compared to the sample average and the standard populationa average. The following will also be found:

          - Degrees of freedom (df)
          - Sample average (M)
          - Standard deviation of the sample (STDEV)
          - Standard error of the mean (SEM)
          - Test group t value (TG)
          - T-Test critical value (TC)

          TG will then be compared to TC to see if the null hypothesis is true or not. The result of the test will then be output to the user.

*******LDR ADC reading to temperature conversion explanation*******
I decided on a maximum temperature value of 50 degrees Celsius. So I divided 1023 by 50 and got 20.46 per degree Celsius.
Therefore as the analog LDR channel is read, the value will be divided by 20.46 before being stored into the array in order to achieve a scale of up to 50 Degrees Celsius.

***STEPS***

1. Establish communication
2. Set output pins to turn on LEDs 1 to 10
3. Tell user about program
4. Filter loop: invalid temp
5. Get standard population average from user and store into variable
6. Tell user to turn on switch 1 to begin data collection
7. Filter loop: check state of switch 1
8. Pass variables into data collection function to fill temperature array and get number of values
9. Pass variables into function to find highest and lowest temperatures
10. Print results to user
11. Find M sample average
12. Output sample average to user
13. Pass variables into function to calculate highest and lowest values as percentages of the sample average and population average
14. Find standard deviation
15. Find standard error
16. Calculate TG value
17. Output values to user for comparison
18. Find TC value
19. Output TC value to user
20. Test hypothesis and output result to the user

*/

//Preprocessor directives

//Function Prototypes
void highlowfinder(float temps[], int num, float &highest, float &lowest, float &highday, float &lowday); // Function that will find the highest and lowest temperature values and the days they were taken
void percentavgfinder(float M, float avg, float highest, float lowest, float &highperc, float &lowperc, float &highperc2, float &lowperc2); // Function to compare the highest and lowest values and output them as percentages of the average of the sample values and the original average
void tempgetter(float temps[], int i, float &num, int moneyranout); // Function to collect temperature data from the LDR over a 1 year period
float MFinder(int numdata, float data[]); // Function to find M sample average
float SDFinder(float numdata, float sampleM, float data[], int degfree); // Function find standard deviation
float SEMFinder(float STANDDEV, float numdata); // Function to find standard error
float TGFinder(float sampleM, float populationM, float STDERRM); // Function to find TG value
float TCFinder(int df); // Function to find TC value

void setup(){

Serial.begin(9600); // Establish communication

// Set input pins (switches 1 and 2)
pinMode(29, LOW);
pinMode(28, LOW);

// Set output pins to turn on LEDs 1 to 10
pinMode(39, OUTPUT);
pinMode(38, OUTPUT);
pinMode(37, OUTPUT);
pinMode(36, OUTPUT);
pinMode(35, OUTPUT);
pinMode(34, OUTPUT); 
pinMode(33, OUTPUT);
pinMode(32, OUTPUT);
pinMode(31, OUTPUT); 
pinMode(30, OUTPUT);

// Tell user about the program
Serial.print("This program will collect temperature readings each day for a 365 day period to determine the effects of climate change on the yearly\ntemperature in a remote area.");
Serial.print(" The test value of the sample (Tg) will be compared to the test value from the population (Tc) to see if the\nyear's temperature was higher or lower than normal. ");
Serial.print("Temperatures are in degrees Celsius.\n\n");
}

void loop(){

// Variable Declaration and Initialization
float temps[365];
int switch1 = 0; // On switch to begin data collection process
float highest = 0; // Variable to store highest temperature value
float lowest = 0; // Variable to store lowest temperature value
int highday = 0; // Variable to store day that highest value was taken
int lowday = 0; // Variable to store day that lowest value was taken
float highperc = 0; // Variable to store calculated value that is the highest sample as a percentage of the sample average
float lowperc = 0; // Variable to store calculated value that is the lowest sample as a percentage of the sample average
float highperc2 = 0; // Variable to store calculated value that is the highest sample as a percentage of the original average
float lowperc2 = 0; // Variable to store calculated value that is the lowest sample as a percentage of the original average
int df = 0; // Variable to store degrees of freedom
float sum = 0, num = 0, M = 0, XMS = 0, XM = 0, STDEV = 0, SEM = 0, TC = 0, TG = 0, AVG = 0; // Variables for statistics calculations

// Get Standard Population Average
Serial.print("Please input the standard population average in Degrees Celsius. The maximum temperature value is 50.");

// Do while filter loop to accept only temperature values below 50 degrees celsius
do{
  Serial.print("\n\nStandard Population Average: ");

  // Get population average from the user and store into variable
  while(Serial.available() == 0){};
  AVG = Serial.parseFloat();
  Serial.print(AVG);
  Serial.print(" Degrees Celsius\n\n");

  // Tell user temperature input is invalid
  if(AVG > 50.0){
    Serial.print("\n\n\nInvalid temperature. Please try again.\n\n\n");
  }
}while(AVG > 50.0); // Exit loop if temperature is a valid input

Serial.print("Thank you. Turn switch 1 on to start the data collection process.\n");
Serial.print("Once the data collection process begins, turn on switch 2 if funding ran out and the study needs to be stopped early.\n\n"); // Explain how to cancel study

// Filter loop to wait for user to turn on switch 1 to begin data collection process
do{
  switch1 = digitalRead(29);
}while(switch1 != 0);

Serial.print("Beginning data collection process...\n\n");

digitalWrite(39, HIGH); // Turn on LED 1 to show that system is running

Serial.print("Completion Percentage: "); // Print completion percentage to the user

tempgetter(temps, num); // Pass temperature array and num variables into function to collect data from the LDR as temperatures readings

// Find and output degrees of freedom
df = num - 1;
Serial.print("\n\nThere are ");
Serial.print(df);
Serial.print(" degrees of freedom");

 // Pass temp array and number of samples into function to find highest and lowest samples and the day they were taken
highlowfinder(temps, num, highest, lowest, highday, lowday);

// Output highest and lowest samples and day they were taken
Serial.print("\n\nHighest Sample Temperature: ");
Serial.print(highest);
Serial.print("\nDay of reading: ");
Serial.print(highday);
Serial.print("\n\nLowest Sample Temperature: ");
Serial.print(lowest);
Serial.print("\nDay of reading: ");
Serial.print(lowday);
Serial.print("\n\n");

// Find and output M (sample average)
M = MFinder(num, temps);
Serial.print("Sample average is: ");
Serial.print(M);
Serial.print(" degrees Celsius\n\n");

// Pass M, AVG, highest/lowest samples into function to calculate percentage of sample average/population average
percentavgfinder(M, AVG, highest, lowest, highperc, lowperc, highperc2, lowperc2);

// Output highest/lowest samples as a percentage of the sample average/population average
Serial.print("Highest value as percentage of the sample average: ");
Serial.print(highperc);
Serial.print("%");
Serial.print("\nLowest value as percentage of the sample average: ");
Serial.print(lowperc);
Serial.print("%");
Serial.print("\n\nHighest value as percentage of the population average: ");
Serial.print(highperc2);
Serial.print("%");
Serial.print("\nLowest value as percentage of the population average: ");
Serial.print(lowperc2);
Serial.print("%\n\n");


// find SD
STDEV = SDFinder(num, M, temps, df);

// find SEM
SEM = SEMFinder(STDEV, num);

// find TG
TG = TGFinder(M, AVG, SEM);

// Output SD, SEM, TG to user so that they can later compare the values
Serial.print("SD: ");
Serial.print(STDEV);
Serial.print("\n");
Serial.print("SEM: ");
Serial.print(SEM);
Serial.print("\n");
Serial.print("Test Group t-value: ");
Serial.print(TG);
Serial.print("\n");

// Find TC
TC = TCFinder(df);

// Output TC to user for comparison
Serial.print("Critical value (TC): ");
Serial.print(TC);
Serial.print("\n\n");

// Find final answer to hypothesis test
if(TG == TC){
  Serial.print("There is NO difference between your population and your sample group: h0 stands (AVG == M) \n\n\n\n"); 
}
else{  
  if(TG > TC){    
      Serial.print("There IS a difference between your sample group and the population: TG > TC, h1 stands, AVG != M \n\n\n\n");   
  }  
  else{ 
      Serial.print("There is NO difference between your sample group and the population: TG < TC, h0 stands (AVG == M) \n\n\n\n");  
   }
}

// Turn off all LEDs before restarting program
digitalWrite(39, LOW);
digitalWrite(38, LOW);
digitalWrite(37, LOW);
digitalWrite(36, LOW);
digitalWrite(35, LOW);
digitalWrite(34, LOW);
digitalWrite(33, LOW);
digitalWrite(32, LOW);
digitalWrite(31, LOW);
digitalWrite(30, LOW);

Serial.print("\n\n\n\n\n\n\n");
delay(4000);

}

//Function Definitions
void tempgetter(float temps[], float &num){ // Function to collect temperature data from the LDR over a 1 year period
  int i = 0; // Incrementor
  int moneyranout; // Variable to store state of switch 2 (cancel study switch)
  float tempbits = 20.46; // Variable to store value of (1023 / 50 = 20.46 bits/degree Celsius) which will be used to convert LDR values into temperatures on a scale of 0 to 50
  
  do{  

  // If else if structure to turn on LEDs / print completion percentage based on the value of i
  if(i == 37){
    Serial.print("10% - ");
  }
  else if(i == 73){
    digitalWrite(38, HIGH);
    Serial.print("20% - ");    
  }
  else if(i == 110){
    digitalWrite(37, HIGH);
    Serial.print("30% - ");
  }
  else if(i == 146){
    digitalWrite(36, HIGH);
    Serial.print("40% - ");
  }
  else if(i == 183){
    digitalWrite(35, HIGH);
    Serial.print("50% - ");
  }
  else if(i == 219){
    digitalWrite(34, HIGH);
    Serial.print("60% - ");
  }
  else if(i == 256){
    digitalWrite(33, HIGH);
    Serial.print("70% - ");
  }
  else if(i == 292){
    digitalWrite(32, HIGH);
    Serial.print("80% - ");
  }
  else if(i == 329){
    digitalWrite(31, HIGH);
    Serial.print("90% - ");
  }
  else if(i == 364){
    digitalWrite(30, HIGH);
    Serial.print("100%");
  }

  // tempbits = 20.46 (20.46 bits/degree celsius * 50 (max temp value) = 1023). As the LDR is read, the value is divided by 20.46 to achieve a scale of 0 to 50 degrees celsius. This allows a real celsius value to enter the array element.
  temps[i] = analogRead(A15) / tempbits;

  i++;
  
  num = i; // Make number of samples equal to incrementor
  
  moneyranout = digitalRead(28); // Check state of switch 2 (money ran out switch)

  delay(41); // 41ms delay to gather data in 15 seconds. (0.041s * 365 samples = 15s)
  
}while((moneyranout != 0) && (i < 365)); // Exit loop if money runs out or a year's worth of samples is taken

}

void highlowfinder(float temps[], float num, float &highest, float &lowest, int &highday, int &lowday){  // Function that will find the highest and lowest temperature values and the days they were taken
 
  highest = temps[0]; // Hold values to start sorting for highest and lowest samples
  lowest = temps[0];  
  
  for(int i = 1; i < num; i++){ // Loop to find highest sample and day it was taken
    if(highest < temps[i]){
      highest = temps[i];
      highday = i;
    }
  }
    
  for(int i = 1; i < num; i++){ // Loop to find lowest sample and day it was taken
    if(lowest > temps[i]){
      lowest = temps[i];
      lowday = i;
    } 
  }
}

void percentavgfinder(float M, float avg, float highest, float lowest, float &highperc, float &lowperc, float &highperc2, float &lowperc2){ // Function to compare the highest and lowest values and output them as percentages of the average of the sample values and the original average
 
  highperc = (highest / M) * 100; // Calculate highest sample as percentage of the sample average
  lowperc = (lowest / M) * 100; // Calculate lowest sample as percentage of the sample average

  highperc2 = (highest / avg) * 100; // Calculate highest sample as percantage of the original average
  lowperc2 = (lowest / avg) * 100; // Calculate lowest sample as percentage of the original average
}

float MFinder(int numdata, float data[]){ // Function to find M (sample average)
  
  int i = 0;
  float sum, samplem;

  while(i < numdata){
    sum += data[i];
    i++;
  }

  samplem = sum/numdata;
  
return samplem; 
}

float SDFinder(float numdata, float sampleM, float data[], int degfree){ // Function to find standard deviation

  int i = 0;
  float XM, XMS, stdev;

  while(i < numdata){  
    XM = data[i] - sampleM;
    XMS += pow(XM, 2);
    i++; 
  }

    stdev = sqrt(XMS / degfree);

return stdev;
}

float SEMFinder(float STANDDEV, float numdata){ // Function to find standard error
  
  float SEM;
  
  SEM = STANDDEV / (sqrt(numdata));
  
return SEM; 
}

float TGFinder(float sampleM, float populationM, float STDERRM){ // Function to find TG value
  
  float TG;
  
  TG = (sampleM - populationM) / STDERRM;

return TG;  
}

float TCFinder(int df){ // Function to look up TC value in a table
  
  const float table[36]={6.314, 2.920, 2.353, 2.132, 2.015, 1.943, 1.895, 1.860, 1.833, 1.813, 1.796, 1.783, 1.771, 1.762, 1.753, 1.746, 1.743, 1.740, 1.729, 1.725, 1.721, 1.717, 1.714, 1.711, 1.708, 1.706, 1.704, 1.701, 1.699, 1.698, 1.690, 1.684, 1.671, 1.664, 1.660, 1.658};
  float TC;
  
  if (df < 91){
      int hold = df / 3;
      TC = table[hold-1]; 
  }
  else if ((df > 91) && (df < 106)){ 
      TC = table[30]; 
  }
  else if ((df >= 106) && (df < 121)){ 
      TC = table[31]; 
  }
  else if ((df >= 121) && (df < 183)){ 
      TC = table[32]; 
  }
  else if ((df >= 183) && (df < 243)){
      TC = table[33]; 
  }
  else if ((df >= 243) && (df < 304)){ 
      TC = table[34];
  }
  else{ 
      TC = table[35];  
  }

return TC;
}
